allprojects {
    group = 'com.ptirador'
    version = '1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'war'

    // Make sure transitive project dependencies are resolved
    configurations.compile.transitive = true

    configurations {
        all*.exclude group: "commons-logging", module: "commons-logging"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }
}

// We define versions for the libraries we will be using
ext {
    slf4jVersion = '1.7.25'
    springVersion = '4.3.11.RELEASE'
    springMongoVersion = '1.10.7.RELEASE'
    springSecurityVersion = '4.2.3.RELEASE'
    jstlVersion = '1.2'
    tilesVersion = '3.0.7'
    hibernateVersion = '6.0.2.Final'
    poiVersion = '3.17'
    jacksonVersion = '2.9.1'
    servletApiVersion = '3.1.0'
    taglibsVersion = '1.1.2'
    validationApiVersion = '2.0.0.Final'

    // We group libraries by their purpose so we can import them easier in the modules
    misc = [
            slf4jApi       : "org.slf4j:slf4j-api:$slf4jVersion",
            jstl           : "javax.servlet:jstl:$jstlVersion",
            tilesJsp       : "org.apache.tiles:tiles-jsp:$tilesVersion",
            poi            : "org.apache.poi:poi:${poiVersion}",
            poiOoxml       : "org.apache.poi:poi-ooxml:${poiVersion}",
            jacksonCore    : "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            jacksonDatabind: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
    ]

    hibernate = [
            validator: "org.hibernate:hibernate-validator:$hibernateVersion",
    ]


    spring = [
            data           : "org.springframework.data:spring-data-mongodb:$springMongoVersion",
            web            : "org.springframework:spring-web:$springVersion",
            webmvc         : "org.springframework:spring-webmvc:$springVersion",
            contextSupport : "org.springframework:spring-context-support:$springVersion",
            securityWeb    : "org.springframework.security:spring-security-web:$springSecurityVersion",
            securityTaglibs: "org.springframework.security:spring-security-taglibs:$springSecurityVersion",
            securityConfig : "org.springframework.security:spring-security-config:$springSecurityVersion"
    ]

    others = [
            servletApi   : "javax.servlet:javax.servlet-api:$servletApiVersion",
            standard     : "taglibs:standard:$taglibsVersion",
            validationApi: "javax.validation:validation-api:$validationApiVersion"
    ]
}

dependencies {
    compile misc.slf4jApi, misc.jstl, misc.tilesJsp, misc.poi, misc.poiOoxml,
            misc.jacksonCore, misc.jacksonDatabind,
            hibernate.validator,
            spring.data, spring.web, spring.webmvc, spring.contextSupport,
            spring.securityWeb, spring.securityTaglibs, spring.securityConfig,
            others.servletApi, others.standard, others.validationApi

}

task allDeps << {
    description 'Task used to display dependencies for all modules in the project'

    allprojects.each { p ->
        println()
        println " $p.name ".center(60, '*')
        println()
        configurations.all.findAll { !it.allDependencies.empty }.each { c ->
            println " ${c.name} ".center(60, '-')
            c.allDependencies.each { dep ->
                println "$dep.group:$dep.name:$dep.version"
            }
            println "-" * 60
        }
    }

}


task allCompile << {
    description 'Task used to compile all modules in the project without running tests'
    allprojects.each { p ->
        p.getTasksByName("clean", true).each { t ->
            println "-> $p.name [CLEAN]"
            t.execute();
        }
        p.getTasksByName("compileJava", true).each { t ->
            println "-> $p.name [COMPILE]"
            t.execute();
        }
        p.getTasksByName("classes", true).each { t ->
            println "-> $p.name [CLASSES]"
            t.execute();
        }
        p.getTasksByName("war", true).each { t ->
            println "-> $p.name [WAR]"
            t.execute();
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

